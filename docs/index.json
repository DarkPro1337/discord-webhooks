[
{
	"uri": "http://localhost:1313/examples/twitch/",
	"title": "Twitch",
	"tags": [],
	"description": "",
	"content": " Обычная версия if Stream going live for X then Make a web request { \u0026quot;embeds\u0026quot;: [{ \u0026quot;color\u0026quot;: 6570405, \u0026quot;author\u0026quot;:{ \u0026quot;name\u0026quot;:\u0026quot;{{ChannelName}}\u0026quot;, \u0026quot;url\u0026quot;:\u0026quot;{{ChannelUrl}}\u0026quot; }, \u0026quot;description\u0026quot;: \u0026quot;**is now streaming on Twitch**\u0026quot;, \u0026quot;fields\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;:video_game: Game\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;{{Game}}\u0026quot;, \u0026quot;inline\u0026quot;: true }, { \u0026quot;name\u0026quot;: \u0026quot;:eye: Viewers\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;{{CurrentViewers}}\u0026quot;, \u0026quot;inline\u0026quot;: true } ], \u0026quot;image\u0026quot;: { \u0026quot;url\u0026quot;: \u0026quot;{{StreamPreview}}\u0026quot; }, \u0026quot;footer\u0026quot;: { \u0026quot;text\u0026quot;: \u0026quot;http://twitch.tv\u0026quot;, \u0026quot;icon_url\u0026quot;: \u0026quot;https://d1qb2nb5cznatu.cloudfront.net/startups/i/114142-19c0993bf69c468f1350fd422bfad6b2-medium_jpg.jpg?buster=1410211530\u0026quot; } }] }  Улучшенная версия if Stream going live for X then Make a web request В 8-ой и 21-ой строках вам нужно будет заменить текст URL AVATAR на ссылку со своим аватаром. Вы можете указать как и с самого Twitch так и с любого хостинга. Я рекомендую использовать для этого imgur!\n\r{ \u0026quot;content\u0026quot;: \u0026quot;:loudspeaker: Хей @everyone! {{ChannelName}} сейчас стримит {{ChannelUrl}} ! Залетайте! :wink:\u0026quot;, \u0026quot;embeds\u0026quot;: [{ \u0026quot;color\u0026quot;: 6570405, \u0026quot;author\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;{{ChannelName}}\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;{{ChannelUrl}}\u0026quot;, \u0026quot;icon_url\u0026quot;: \u0026quot;URL AVATAR\u0026quot; }, \u0026quot;description\u0026quot;: \u0026quot;**[{{ChannelName}}]({{ChannelUrl}})** сейчас стримит на Twitch!\u0026quot;, \u0026quot;fields\u0026quot;: [{ \u0026quot;name\u0026quot;: \u0026quot;:video_game: Game\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;{{Game}}\u0026quot;, \u0026quot;inline\u0026quot;: true }, { \u0026quot;name\u0026quot;: \u0026quot;:eye: Viewers\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;{{CurrentViewers}}\u0026quot;, \u0026quot;inline\u0026quot;: true }], \u0026quot;thumbnail\u0026quot;: { \u0026quot;url\u0026quot;: \u0026quot;URL AVATAR\u0026quot; }, \u0026quot;image\u0026quot;: { \u0026quot;url\u0026quot;: \u0026quot; {{StreamPreview}}\u0026quot; }, \u0026quot;footer\u0026quot;: { \u0026quot;text\u0026quot;: \u0026quot;twitch.tv | {{CreatedAt}}\u0026quot;, \u0026quot;icon_url\u0026quot;: \u0026quot;https://d1qb2nb5cznatu.cloudfront.net/startups/i/114142-19c0993bf69c468f1350fd422bfad6b2-medium_jpg.jpg?buster=1410211530\u0026quot; } }] }  Версия для IFTTT Platform if Stream going live for X filter Filter code then Make a web request В 7-ой строке вам нужно будет заменить текст URL AVATAR на ссылку со своим аватаром. Вы можете указать как и с самого Twitch так и с любого хостинга. Я рекомендую использовать для этого imgur!\n\rIFTTT Platform понимает JSON, но вам нужно будет преобразовать его в TypeScript. 1. {{ }} - заменяется на ${ }\n2. У пары ключ-значение с ключа нужно убрать кавычки (\u0026quot; \u0026quot;), а у значения нужно заменять кавычки (\u0026quot; \u0026quot;) на гравис (` `) 3. Если у пары ключ-значение, в значении указывается переменная, то её обрамлять не нужно!\nДля лучшего понимания попробуйте поизменять мой пример.\n\rЭта версия умеет генерировать случайные названия для первью стримов, благодаря этому превью со стримов будут кэшироваться правильно. Так к примеру человек, который увидит уведомление о стриме, не будет видеть один и тот же превью каждый раз.\n\rFilter Code var CreatedAt = Meta.triggerTime var Game = Trigger.Game var ChannelName = Trigger.ChannelName var ChannelUrl = Trigger.ChannelUrl var CurrentViewers = Trigger.CurrentViewers var preview = Trigger.StreamPreview + '?v=' + Math.round(Math.random() * 1000000); var body = { content: `:loudspeaker: Хей @everyone! ${ChannelName} сейчас стримит ${ChannelUrl} ! Залетайте! :wink:`, embeds: [{ color: 6570405, author: { name: `${ChannelName}`, url: `${ChannelUrl}`, icon_url: `URL AVATAR` }, description: `**[${ChannelName}](${ChannelUrl})** is now streaming on Twitch!`, fields: [{ name: `:video_game: Game`, value: `${Game}`, inline: true }, { name: `:eye: Viewers`, value: `${CurrentViewers}`, inline: true }], thumbnail: { url: `URL AVATAR` }, image: { url: preview }, footer: { text: \u0026quot;twitch.tv\u0026quot;, icon_url: `https://d1qb2nb5cznatu.cloudfront.net/startups/i/114142-19c0993bf69c468f1350fd422bfad6b2-medium_jpg.jpg?buster=1410211530` }, timestamp: CreatedAt }] }; MakerWebhooks.makeWebRequest.setBody(JSON.stringify(body));  "
},
{
	"uri": "http://localhost:1313/tools/postman/",
	"title": "Postman",
	"tags": [],
	"description": "",
	"content": "Postman — это очень удобная программа для отправки REST запросов. Вы так же можете использовать его для вебхуков.\nДля начала вам нужно установить Postman. Он доступен для Windows, Linux и MacOS.\n"
},
{
	"uri": "http://localhost:1313/services/ifttt/",
	"title": "IFTTT",
	"tags": [],
	"description": "",
	"content": " IFTTT — это сервис позволяющий соединять сервисы между собой. Он поддерживает вебхуки, поэтому мы можем использовать его с Discord.\nАккаунт на IFTTT Зайдите на IFTTT и создайте там свой аккаунт (если у вас его нет)\nВебхуки в Discord  Зайдите в Настройки сервера → Вебхуки → Создать вебхук Укажите имя, установите аватар и канал в который вебхук будет отправлять сообщения. Скопируйте URL Вебхука. Не отправляйте никому эту ссылку! Это очень опасно! Нажмите на Сохранить  Создаём Апплет if this  Перейдите в My Applets → New Applet Кликните [+]this Выберите сервис Выберите триггер. Прочитайте описание под каждым триггером и выберите нужный Заполните поля триггера. Здесь может быть ещё один шаг. Прочитайте описание и просмотрите примеры  then that  Кликните [+]that Выберите сервис действия. Нам нужен Webhooks. Используйте поиск Выберите действие. Выбирайте Make a web request Вставьте URL Вебхука в поле URL Выберите метод POST Выберите application/json из списка Content Type А теперь самая сложная часть™. Вам нужно будет создать JSON body и указать его в Body для запроса. Придерживайтесь структуры (которую можно найти в этом гайде), используйте её как пример, и не забывайте о здравом смысле™. Нажмите Add ingredient и добавьте ингредиентов в соответствующие поля. Нажмите Create Action а затем Finish Готово!  Советы  Экранируйте ингредиенты! Добавьте \u0026lt;\u0026lt;\u0026lt; и \u0026gt;\u0026gt;\u0026gt; между ними. Это может помочь исправить проблемы вызванные неэкранированными символами. Экранирование ссылок опционально. Не забудьте проверить ваш JSON body при помощи JSON валидатора. Если вы не знаете ни одного валидатора, могу порекомендовать эти:  JSON Formatter JSON Editor Online JSON Lint  Я настоятельно рекомендую использовать Embed Visualizer. Не забудьте переключится в режим вебхука, нажав Enable webhook mode и добавьте ваш JSON body для тестирования. Discord имеет встроенные вложения для Twitter, YouTube и некоторых других, поэтому вы можете сделать ваш вебхук проще: {\u0026quot;content\u0026quot;: \u0026quot;{{Url}}\u0026quot;}. Просто попробуйте.  "
},
{
	"uri": "http://localhost:1313/structure/username/",
	"title": "username",
	"tags": [],
	"description": "",
	"content": "Заменяет название вебхука. Полезно, если вы используете одну и ту же ссылку на вебхук.\nПример:\n{ \u0026quot;username\u0026quot;: \u0026quot;Kooh Niatpac\u0026quot;, \u0026quot;content\u0026quot;: \u0026quot;Привет. Я вебхук, моё оригинальное имя Captain Hook!\u0026quot; }  "
},
{
	"uri": "http://localhost:1313/intro/json/",
	"title": "JSON",
	"tags": [],
	"description": "",
	"content": " Если вы не знаете ничего о JSON, пожалуйста потратьте немного своего времени, чтобы изучить его структуру.\nЧто такое JSON? Аббревиатура JSON расшифровывается как:\n Java Script Object Notation  Не бойтесь. JSON прост в изучении и использовании! И это не язык программирования. JSON — это формат хранения данных, который легко читается и записывается, как людьми, так и роботами.\n\r key: value - это пара ключ-значение Ключ и значение разделяются двоеточием (:), без исключений. Множественные ключ-значение разделяются запятой (,), без исключений. Пробелы и переносы строки можно использовать пока они не являются частью ключа или значения. key - это только текст вставленный между двумя кавычками (\u0026quot; \u0026quot;). Но value бывает разных видов:  Строка - \u0026quot;текст\u0026quot;, \u0026quot;классные\\nштуки\u0026quot;. Номер - 42, -300, 6.62e-34. Объект - { \u0026quot;Имя\u0026quot;: \u0026quot;Джейсон\u0026quot;, \u0026quot;Любит\u0026quot;: [\u0026quot;Яблоки\u0026quot;, \u0026quot;Апельсины\u0026quot;] }. Массив - [\u0026quot;Яблоко\u0026quot;, \u0026quot;Банан\u0026quot;, \u0026quot;Апельсин\u0026quot;], [1, true, 3, \u0026quot;мяу\u0026quot;]. Логическое - true, false. Ноль - null.   О строковых значениях Строковые значения могут хранить в себе любые символы, какие вы укажите, но некоторые из них могут быть экранированы:\n Двойные кавычки - \\\u0026quot; Слэш - \\\\ Обратный слэш - \\/ (экранирование опционально) Новая строка - \\n (используйте это если, хотите перейти на новую строку в значении) Возврат каретки - \\r (возвращает на начало строки) Табуляция - \\t Пробел назад - \\b Новая страница - \\f Символ Юникода - \\uxxxx  Пример { \u0026quot;name\u0026quot;: \u0026quot;Pumpkin\u0026quot;, \u0026quot;age\u0026quot;: 7, \u0026quot;likes\u0026quot;: [ \u0026quot;patting\u0026quot;, \u0026quot;sleeping in a garden\u0026quot;, \u0026quot;salmon\u0026quot; ], \u0026quot;appearance\u0026quot;: \u0026quot;Orange Tabby\u0026quot;, \u0026quot;owner_name\u0026quot;: \u0026quot;Jane Doe\u0026quot;, \u0026quot;phone_number\u0026quot;: \u0026quot;+447712345678\u0026quot;, \u0026quot;address\u0026quot;: { \u0026quot;country\u0026quot;: \u0026quot;England\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;London\u0026quot;, \u0026quot;street\u0026quot;: \u0026quot;Crown Street\u0026quot;, \u0026quot;house\u0026quot;: 38, \u0026quot;notes\u0026quot;: null } }  Полезные ресурсы  Изучите X за Y минут, где X=json - быстрый туториал по JSON. JSON официальный сайт - который объясняет формат при помощи блок-схем.  "
},
{
	"uri": "http://localhost:1313/examples/spotify/",
	"title": "Spotify",
	"tags": [],
	"description": "",
	"content": " if New saved track then Make a web request { \u0026quot;embeds\u0026quot;: [{ \u0026quot;color\u0026quot;: 2021216, \u0026quot;title\u0026quot;: \u0026quot;New song added!\u0026quot;, \u0026quot;thumbnail\u0026quot;: { \u0026quot;url\u0026quot;: \u0026quot;{{AlbumCoverURL}}\u0026quot; }, \u0026quot;fields\u0026quot;:[ { \u0026quot;name\u0026quot;: \u0026quot;Track\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;[{{TrackName}}]({{TrackURL}})\u0026quot;, \u0026quot;inline\u0026quot;: true }, { \u0026quot;name\u0026quot;: \u0026quot;Artist\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;{{ArtistName}}\u0026quot;, \u0026quot;inline\u0026quot;: true }, { \u0026quot;name\u0026quot;: \u0026quot;Album\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;{{AlbumName}}\u0026quot;, \u0026quot;inline\u0026quot;: true } ], \u0026quot;footer\u0026quot;: { \u0026quot;text\u0026quot;: \u0026quot;Added {{SavedAt}}\u0026quot;, \u0026quot;icon_url\u0026quot;: \u0026quot;https://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Spotify_logo_without_text.svg/200px-Spotify_logo_without_text.svg.png\u0026quot; } }] }  "
},
{
	"uri": "http://localhost:1313/tools/httpie/",
	"title": "HTTPie",
	"tags": [],
	"description": "",
	"content": " HTTPie - это консольный HTTP клиент, похожий на cURL, но более дружелюбен к пользователю. Информацию о том, как установить его можно найти здесь.\n Пользователи Linux могут установить его через свой менеджер пакетов, macOS - через Homebrew или MacPorts, Windows - через pip (требует Python 2.x/3.x).  Использование # -j или --json параметр используется по умолчанию, поэтому его можно пропустить # GET метод по умолчанию, но когда вы добавляете какие-либо данные, он переключится на POST # так что его тоже можно пропустить. http -j post \u0026lt;webhook_url\u0026gt; content=\u0026quot;мяу\u0026quot; username=\u0026quot;Кошка\u0026quot; http post \u0026lt;webhook_url\u0026gt; embeds:='[{\u0026quot;title\u0026quot;:\u0026quot;Классно!\u0026quot;}]' http \u0026lt;webhook_url\u0026gt; content=\u0026quot;здравствуй :wave:\u0026quot;  Разделители  = - текст := - необработанный JSON. Используйте его для чисел, логических и вложенных значений. =@ - вложенный файл :=@ - вложенный JSON файл  Кстати, если вы не хотите писать целиком ссылку каждый раз, вы можете установить её как переменную или даже добавить в свой .*rc файл, чтобы он автоматически загружался, когда вы запускаете эмулятор терминала.\n\rurl=\u0026quot;https://discordapp.com/api/webhooks/203019812404264973/rptBmYgoehu70kw2rItSlhRqKi7kMJh1bM2KCUUD2vR6grZckvtdl62h4xR7XWUS5463\u0026quot; http $url content=\u0026quot;Тест!\u0026quot;  Вам могут не понравится вложенные значения. Как альтернативу вы можете использовать перенаправление ввода. Запишите JSON body в файл и используйте его следующей командой:\nhttp $url \u0026lt; body.json  # body.json { \u0026quot;content\u0026quot;: \u0026quot;hello there!\u0026quot;, \u0026quot;embeds\u0026quot;: [{ \u0026quot;title\u0026quot;: \u0026quot;Read me first!\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Good job!\u0026quot; }] }  "
},
{
	"uri": "http://localhost:1313/services/ifttt-platform/",
	"title": "IFTTT Platform",
	"tags": [],
	"description": "",
	"content": " 🚧 Work in progress 🚧 "
},
{
	"uri": "http://localhost:1313/structure/avatar_url/",
	"title": "avatar_url",
	"tags": [],
	"description": "",
	"content": "Заменяет аватарку вебхука. Полезно, если вы используете одну и ту же ссылку на вебхук.\nПример:\n{ \u0026quot;avatar_url\u0026quot;: \u0026quot;https://i.imgur.com/k1ibITc.jpg\u0026quot;, \u0026quot;content\u0026quot;: \u0026quot;Я Офицер KD6-3.7\u0026quot; }  "
},
{
	"uri": "http://localhost:1313/intro/discord-webhook/",
	"title": "Discord Webhook",
	"tags": [],
	"description": "",
	"content": " Структура Вебхуков Прежде чем использовать Вебхуки вы должны знать структуру. Все ниже перечисленные элементы необязательны, но вам всё равно придётся использовать content и embeds хотя бы раз. Это минимальное требование.\n username - заменяет имя вебхука avatar_url - заменяет аватар вебхука content - устанавливает текст выводимый вебхуком (до 2000 символов) embeds - массив вложенных объектов в сообщении. Это означает, что вы можете указать туда более одного объекта в одном сообщении  color - устанавливает цвет для полоски вложения. Указывайте цвет в десятичной системе цифр, а не шестнадцатеричной. Используйте SpyColor для этого. author - добавляет блок автора во вложение name - имя автора url - ссылка на автора. Если бы использован name превращается в гиперссылку icon_url - ссылка на иконку автора title - устанавливает заголовок вложения url - ссылка вложения. Если бы использован title превращается в гиперссылку description - текст описания fields - массив объекта field во вложении name - имя поля value - значение поля inline - если значение true, то поля будут отображаться на одной линии, но их может быть только 3 на одной линии, или 2 если был использован thumbnail thumbnail - добавляет миниатюрное изображение во вложение url - ссылка на изображение image - добавляет изображение во вложение url - ссылка на изображение footer - добавляет \u0026ldquo;подвал\u0026rdquo; (нижний блок) во вложение text - текст нижнего блока, не поддерживает Markdown icon_url - ссылка на иконку нижнего блока timestamp - отметка времени по стандарту ISO8601 (yyyy-mm-ddThh:mm:ss.msZ)   Пример Вебхука { \u0026quot;username\u0026quot;: \u0026quot;Вебхук\u0026quot;, \u0026quot;avatar_url\u0026quot;: \u0026quot;https://i.imgur.com/8gzrpIh.png\u0026quot;, \u0026quot;content\u0026quot;: \u0026quot;Текст сообщения. До 2000 символов.\u0026quot;, \u0026quot;embeds\u0026quot;: [ { \u0026quot;author\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;DOGE\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://www.reddit.com/r/doge/\u0026quot;, \u0026quot;icon_url\u0026quot;: \u0026quot;https://i.imgur.com/1PQ1yfi.png\u0026quot; }, \u0026quot;title\u0026quot;: \u0026quot;Заголовок\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://google.com/\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Текст сообщения. Здесь можно использовать Markdown. *Курсив* **жирный** __подчёркнутый__ ~~зачёркнутый~~ [гиперссылка](https://google.com) `код`\u0026quot;, \u0026quot;color\u0026quot;: 15258703, \u0026quot;fields\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;Текст\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;Ещё текста\u0026quot;, \u0026quot;inline\u0026quot;: true }, { \u0026quot;name\u0026quot;: \u0026quot;Нам нужно больше текста\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;Агась\u0026quot;, \u0026quot;inline\u0026quot;: true }, { \u0026quot;name\u0026quot;: \u0026quot;Используйте параметр `\\\u0026quot;inline\\\u0026quot;: true` , если вы хотите чтоб поля распалагались на одной линии.\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;Ладно...\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;Спасибо!\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;Не за что! :wink:\u0026quot; } ], \u0026quot;thumbnail\u0026quot;: { \u0026quot;url\u0026quot;: \u0026quot;https://i.imgur.com/2p68pbG.jpg\u0026quot; }, \u0026quot;image\u0026quot;: { \u0026quot;url\u0026quot;: \u0026quot;https://i.imgur.com/2p68pbG.jpg\u0026quot; }, \u0026quot;footer\u0026quot;: { \u0026quot;text\u0026quot;: \u0026quot;Вау! Как класно! :smirk:\u0026quot;, \u0026quot;icon_url\u0026quot;: \u0026quot;https://i.imgur.com/AAeBJBp.png\u0026quot; } } ] }  Как он выглядит "
},
{
	"uri": "http://localhost:1313/tools/curl/",
	"title": "cURL",
	"tags": [],
	"description": "",
	"content": " cURL - это консольная утилита и библиотека для передачи данных через URL. Доступна для большинства платформ.\n Linux - устанавливается через менеджер пакетов. macOS - homebrew или MacPorts Windows - скачать файл и распаковать его в директорию, и добавить её в PATH.  Использование curl -H \u0026quot;Content-Type: application/json\u0026quot; -X POST -d \u0026lt;body\u0026gt; \u0026lt;link\u0026gt;\ncurl -H \u0026quot;Content-Type: application/json\u0026quot; -X POST -d '{\u0026quot;username\u0026quot;: \u0026quot;Тест\u0026quot;, \u0026quot;content\u0026quot;: \u0026quot;Привет!\u0026quot;}' https://discordapp.com/api/webhooks/203019812404264973/rptBmYgoehu70kw2rItSlhRqKi7kMJh1bM2KCUUD2vR6grZckvtdl62h4xR7XWUS5463 # -H \u0026quot;Content-Type: application/json\u0026quot; - загаловок которые сообщает серверу, что вы отправляете JSON данные # -X POST - использовать метод POST # -d '{\u0026quot;username\u0026quot;: \u0026quot;Тест\u0026quot;, \u0026quot;content\u0026quot;: \u0026quot;Привет!\u0026quot;}' - добавляет данные в запрос  url='https://discordapp.com/api/webhooks/203019812404264973/rptBmYgoehu70kw2rItSlhRqKi7kMJh1bM2KCUUD2vR6grZckvtdl62h4xR7XWUS5463' curl -H \u0026quot;Content-Type: application/json\u0026quot; \\ -X POST \\ -d '{\u0026quot;username\u0026quot;: \u0026quot;Тест\u0026quot;, \u0026quot;content\u0026quot;: \u0026quot;Привет!\u0026quot;}' $url # вы можете сделать многострочную комманду используя бэкслэш `\\` и установить ссылку как переменную # и не нужно будет вставлять её снова и снова. Так же вы можете добавить её в ваш `.*rc` файл  "
},
{
	"uri": "http://localhost:1313/structure/content/",
	"title": "content",
	"tags": [],
	"description": "",
	"content": "Устанавливает текст который будет выводится вебхуком.\nПример:\n{ \u0026quot;content\u0026quot;: \u0026quot;(╯°□°）╯︵ ┻━┻\u0026quot; }  "
},
{
	"uri": "http://localhost:1313/intro/",
	"title": "Введение",
	"tags": [],
	"description": "",
	"content": " Что такое вебхук и зачем он нужен Каждый сервер в Discord обладает возможностью добавления вебхука. С помощью него можно получать сообщения, например с сервиса IFTTT или любых других. Сообщения вы будете именно получать, а не постоянно проверять их наличие, работать это будет по принципу: Вы сообщаете Discord следующее: \u0026ldquo;Если кто-то мне напишет, стукни сюда — (ссылка)\u0026ldquo;.\nДопустим, вы запустили стрим на своём Twitch канале, но самостоятельно делать анонс в свой Discord чат долго, но что если вам нужно отправить уведомление не только в Discord чат, но и в Twitter\u0026hellip; а может быть ещё в Tumblr? Да, это займёт достаточно времени. Но это можно легко автоматизировать.\n"
},
{
	"uri": "http://localhost:1313/structure/embeds/",
	"title": "embeds",
	"tags": [],
	"description": "",
	"content": "Добавляет сообщение с вложением. embeds это массив, который может содержать до 10 вложений в одном сообщении.\nПример:\n{ \u0026quot;embeds\u0026quot;: [{ \u0026quot;title\u0026quot;: \u0026quot;Здравствуй!\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Привет! :grinning:\u0026quot; }] }  { \u0026quot;embeds\u0026quot;: [ { \u0026quot;title\u0026quot;: \u0026quot;Мяу!\u0026quot;, \u0026quot;color\u0026quot;: 32768 }, { \u0026quot;title\u0026quot;: \u0026quot;Мяу-мяу!\u0026quot;, \u0026quot;color\u0026quot;: 13369344 } ] }  "
},
{
	"uri": "http://localhost:1313/structure/",
	"title": "Структура вебхуков Discord",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/services/",
	"title": "Интеграция с",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/structure/tts/",
	"title": "tts",
	"tags": [],
	"description": "",
	"content": "Включает синтезатор речи для текущего сообщения, поэтому каждый у кого включен синтезатор речи услышат это сообщение.\nПример:\n{ \u0026quot;content\u0026quot;: \u0026quot;Привет\u0026quot;, \u0026quot;tts\u0026quot;: true }  "
},
{
	"uri": "http://localhost:1313/tools/",
	"title": "Использовать с",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/structure/file/",
	"title": "file",
	"tags": [],
	"description": "",
	"content": " Отправление файлов через вебхук совместима только с заголовком Content-Type: multipart/form-data. Вы можете отправить до 10 файлов в одном запросе. Заметьте, что вы не можете отправлять вложенные параметры используя форму типа embeds. Вместо этого вложите для JSON сообщения параметр payload_json.\nНе забудьте указать уникальные имена для названий изображений. В противном случае будет отправлен только один файл с одинаковыми именами.\n\rПример "
},
{
	"uri": "http://localhost:1313/structure/embeds/color/",
	"title": "color",
	"tags": [],
	"description": "",
	"content": "Устанавливает цвет для полоски вложения. По упомолчанию значение равняется 0 (прозрачный). Цвет устанавливается номером, вместо HEX-кода цвета, поэтому вам нужно конвертировать код цвета из шестнадцатеричной в десятичную систему счисления. Цвет может быть указан как номер 32768 или как строковое значение \u0026quot;14177041\u0026quot;.\nЯ рекомендую использовать SpyColor для выбора цвета, он показывает десятичное значение.\nПример:\n{ \u0026quot;embeds\u0026quot;: [ { \u0026quot;title\u0026quot;: \u0026quot;Мяу!\u0026quot;, \u0026quot;color\u0026quot;: 32768 }, { \u0026quot;title\u0026quot;: \u0026quot;Мяу-мяу!\u0026quot;, \u0026quot;color\u0026quot;: \u0026quot;13369344\u0026quot; } ] }  "
},
{
	"uri": "http://localhost:1313/examples/",
	"title": "Примеры",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/structure/embeds/author/",
	"title": "author",
	"tags": [],
	"description": "",
	"content": "Добавляет блок автора во вложение. author это объект который включает в себя три значения:\n name - устанавливает имя. url - устанавливает ссылку. Требует значения name. Если используется, преобразует name в гиперссылку. icon_url - устанавливает аватар. Требует значения name.  Пример:\n{ \u0026quot;embeds\u0026quot;: [{ \u0026quot;author\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;Доставщик пиццы 🍕\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://www.reddit.com/r/Pizza/\u0026quot;, \u0026quot;icon_url\u0026quot;: \u0026quot;https://i.imgur.com/1aErQKa.png\u0026quot; }, \u0026quot;description\u0026quot;: \u0026quot;Ваша пицца готова!\\n:timer:ETA: 5 минут.\u0026quot; }] }  "
},
{
	"uri": "http://localhost:1313/other/",
	"title": "Дополнительная информация",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/structure/embeds/title/",
	"title": "title",
	"tags": [],
	"description": "",
	"content": "Устанавливает заголовок вложения в сообщении.\nПример:\n{ \u0026quot;embeds\u0026quot;: [{ \u0026quot;title\u0026quot;: \u0026quot;Мяу!\u0026quot; }] }  "
},
{
	"uri": "http://localhost:1313/structure/embeds/url/",
	"title": "url",
	"tags": [],
	"description": "",
	"content": "Устанавливает ссылку в заголовок вложения в сообщении. Требует переменную title и превращает её в гиперссылку.\n{ \u0026quot;embeds\u0026quot;: [{ \u0026quot;title\u0026quot;: \u0026quot;Google it!\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://google.com\u0026quot; }] }  "
},
{
	"uri": "http://localhost:1313/structure/embeds/description/",
	"title": "description",
	"tags": [],
	"description": "",
	"content": "Устанавливает описание вложения в сообщении.\nПример:\n{ \u0026quot;embeds\u0026quot;: [{ \u0026quot;description\u0026quot;: \u0026quot;*Привет!* **Вау!!** Здесь я могу __использовать__ [гиперссылки](https://discordapp.com).\u0026quot; }] }  "
},
{
	"uri": "http://localhost:1313/structure/embeds/fields/",
	"title": "fields",
	"tags": [],
	"description": "",
	"content": "Позволяет использовать вместе блоки title + description во вложении к сообщению. fields это массив объекта field.\nКаждый объект будет включать три значения:\n name - устанавливает имя для объекта поля. Обязателен; value - устанавливает описание для объекта поля. Обязателен; inline - при true устанавливает поля в одну и ту же линию, но если у вас есть больше 3 объектов с включенным inline или просто очень длинные, то вы получите 3 строки с полями в каждом из них, или с 2 полями если вы используете объект thumbnail . По упомолчанию равен false . Опционален.  Вы можете использовать до 25 полей в одном и том же вложении. name и value поддерживают Discord Markdown.\n\r{ \u0026quot;embeds\u0026quot;: [{ \u0026quot;fields\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;Кошка\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;Привет! :wave:\u0026quot;, \u0026quot;inline\u0026quot;: true }, { \u0026quot;name\u0026quot;: \u0026quot;Собака\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;Здравствуй!\u0026quot;, \u0026quot;inline\u0026quot;: true }, { \u0026quot;name\u0026quot;: \u0026quot;Кошка\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;хочешь поиграть? заходи ко мне в голосовой канал!\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;Собака\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;yay! :grin:\u0026quot; } ] }] }  "
},
{
	"uri": "http://localhost:1313/structure/embeds/image/",
	"title": "image",
	"tags": [],
	"description": "",
	"content": "Позволяет вам использовать изображение во вложении к сообщению. Вы можете установить только ссылку на изображение. Вы не можете указать ширину/высоту изображения.\nПример:\n{ \u0026quot;embeds\u0026quot;: [{ \u0026quot;image\u0026quot;: { \u0026quot;url\u0026quot;: \u0026quot;https://i.imgur.com/2p68pbG.jpg\u0026quot; } }] }  "
},
{
	"uri": "http://localhost:1313/structure/embeds/thumbnail/",
	"title": "thumbnail",
	"tags": [],
	"description": "",
	"content": "Позволяет вам использовать миниатюрное изображение во вложении к сообщению. Вы можете установить только ссылку на изображение. Вы не можете указать ширину/высоту изображения.\nПример:\n{ \u0026quot;embeds\u0026quot;: [{ \u0026quot;thumbnail\u0026quot;: { \u0026quot;url\u0026quot;: \u0026quot;https://i.imgur.com/2p68pbG.jpg\u0026quot; } }] }  "
},
{
	"uri": "http://localhost:1313/structure/embeds/footer/",
	"title": "footer",
	"tags": [],
	"description": "",
	"content": "Позволяет вам добавить \u0026ldquo;подвал\u0026rdquo; во вложение сообщения. footer это объект который включает два значения:\n text - устанавливает имя для автора объекта. Markdown здесь не работает! icon_url - устанавливает иконку для автора объекта. Требует значение text.  Пример:\n{ \u0026quot;embeds\u0026quot;: [{ \u0026quot;footer\u0026quot;: { \u0026quot;text\u0026quot;: \u0026quot;wow! *such markdown* :smirk:\u0026quot;, \u0026quot;icon_url\u0026quot;: \u0026quot;https://i.imgur.com/1PQ1yfi.png\u0026quot; }, \u0026quot;description\u0026quot;: \u0026quot;Ваша пицца готова!\\n:timer:ETA: 10 минут.\u0026quot; }] }  "
},
{
	"uri": "http://localhost:1313/structure/embeds/timestamp/",
	"title": "timestamp",
	"tags": [],
	"description": "",
	"content": "Позволяет вам добовлять timestamp во вложение к сообщению. Время хранится как строка в следующем фомате: \u0026quot;YYYY-MM-DDTHH:MM:SS.MSSZ\u0026quot; . Если footer был использован то он будет разделён маркером ( • ). Так же, это особое поле, поскольку оно может выводить разное время основываясь на устройстве пользователя.\ntimestamp это не просто текст. Это преобразованный UTC формат даты и времени. Он отображает разное время из-за часовых поясов. Посмотрите пример ниже: Я поставил 12pm но он показывает 3pm из-за часового пояса UTC+3.\n\rПример:\n{ \u0026quot;embeds\u0026quot;: [{ \u0026quot;description\u0026quot;: \u0026quot;Путешествие во времени!\u0026quot;, \u0026quot;timestamp\u0026quot;: \u0026quot;2015-12-31T12:00:00.000Z\u0026quot; }] }  "
},
{
	"uri": "http://localhost:1313/",
	"title": "Главная",
	"tags": [],
	"description": "",
	"content": " Главная Содержание  Введение  JSON Структура Вебхуков  Интеграции с:  IFTTT IFTTT Platform  Использование с:  Postman HTTPie cURL  Примеры:  Twitch Spotify  Дополнительная информация  Discord Markdown Slack форматирование Ограничения полей   Ссылки  IFTTT  Postman  cURL  HTTPie  Zapier   Integromat   "
},
{
	"uri": "http://localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]